{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dzoan\\\\OneDrive\\\\Documents\\\\smieciasmieci\\\\src\\\\components\\\\Bins.jsx\";\nimport React from \"react\";\nimport { useRef } from \"react\";\nimport { GeoJSON } from \"react-leaflet\";\nimport Map from '../components/map';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst overpass = require(\"query-overpass\");\nexport default class Castles extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dataHandler = (error, osmData) => {\n      if (!error && osmData.features !== undefined) {\n        this.setState({\n          geojson: osmData\n        });\n      }\n    };\n    this.state = {\n      geojson: undefined\n    };\n  }\n  componentDidMount() {\n    const position = [this.props.data.lat, this.props.data.lng];\n    console.log(\"bins\");\n    console.log(position[1]);\n    const query = `[out:json];(way[amenity=recycling](around:99999, ${position});\\\n                              relation[amenity=recycling](around:99999, ${position}););\\\n                              out body;>;out skel qt;`;\n    const options = {\n      flatProperties: true,\n      overpassUrl: 'https://overpass-api.de/api/interpreter'\n    };\n    overpass(query, this.dataHandler, options);\n  }\n  render() {\n    return this.state.geojson ? /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: this.state.geojson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 34\n    }, this) : null;\n  }\n}","map":{"version":3,"names":["React","useRef","GeoJSON","Map","jsxDEV","_jsxDEV","overpass","require","Castles","Component","constructor","props","dataHandler","error","osmData","features","undefined","setState","geojson","state","componentDidMount","position","data","lat","lng","console","log","query","options","flatProperties","overpassUrl","render","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/dzoan/OneDrive/Documents/smieciasmieci/src/components/Bins.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useRef  } from \"react\";\r\nimport { GeoJSON } from \"react-leaflet\";\r\nimport Map from '../components/map'\r\nconst overpass = require(\"query-overpass\");\r\n\r\nexport default class Castles extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      geojson: undefined\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n   const position = [this.props.data.lat, this.props.data.lng];\r\n   console.log(\"bins\");\r\n   console.log(position[1]);\r\n    const query = `[out:json];(way[amenity=recycling](around:99999, ${position});\\\r\n                              relation[amenity=recycling](around:99999, ${position}););\\\r\n                              out body;>;out skel qt;`;\r\n    const options = {\r\n      flatProperties: true,\r\n      overpassUrl: 'https://overpass-api.de/api/interpreter'\r\n    };\r\n\r\n    overpass(query, this.dataHandler, options);\r\n  }\r\n\r\n  dataHandler = (error, osmData) => {\r\n    if (!error && osmData.features !== undefined) {\r\n      this.setState({ geojson: osmData });\r\n    }\r\n  };\r\n\r\n  render() {\r\n     return this.state.geojson ? <GeoJSON data={this.state.geojson}  /> : null;\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAS,OAAO;AAC/B,SAASC,OAAO,QAAQ,eAAe;AACvC,OAAOC,GAAG,MAAM,mBAAmB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACnC,MAAMC,QAAQ,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAE1C,eAAe,MAAMC,OAAO,SAASR,KAAK,CAACS,SAAS,CAAC;EACnDC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KAqBfC,WAAW,GAAG,CAACC,KAAK,EAAEC,OAAO,KAAK;MAChC,IAAI,CAACD,KAAK,IAAIC,OAAO,CAACC,QAAQ,KAAKC,SAAS,EAAE;QAC5C,IAAI,CAACC,QAAQ,CAAC;UAAEC,OAAO,EAAEJ;QAAQ,CAAC,CAAC;MACrC;IACF,CAAC;IAxBC,IAAI,CAACK,KAAK,GAAG;MACXD,OAAO,EAAEF;IACX,CAAC;EACH;EAEAI,iBAAiBA,CAAA,EAAG;IACnB,MAAMC,QAAQ,GAAG,CAAC,IAAI,CAACV,KAAK,CAACW,IAAI,CAACC,GAAG,EAAE,IAAI,CAACZ,KAAK,CAACW,IAAI,CAACE,GAAG,CAAC;IAC3DC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnBD,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC,CAAC,CAAC,CAAC;IACvB,MAAMM,KAAK,GAAI,oDAAmDN,QAAS;AAC/E,0EAA0EA,QAAS;AACnF,sDAAsD;IAClD,MAAMO,OAAO,GAAG;MACdC,cAAc,EAAE,IAAI;MACpBC,WAAW,EAAE;IACf,CAAC;IAEDxB,QAAQ,CAACqB,KAAK,EAAE,IAAI,CAACf,WAAW,EAAEgB,OAAO,CAAC;EAC5C;EAQAG,MAAMA,CAAA,EAAG;IACN,OAAO,IAAI,CAACZ,KAAK,CAACD,OAAO,gBAAGb,OAAA,CAACH,OAAO;MAACoB,IAAI,EAAE,IAAI,CAACH,KAAK,CAACD;IAAQ;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAAG,IAAI;EAC5E;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}