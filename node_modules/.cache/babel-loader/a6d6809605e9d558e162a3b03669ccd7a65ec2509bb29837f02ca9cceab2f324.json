{"ast":null,"code":"var osmtogeojson = require('osmtogeojson'),\n  querystring = require('querystring'),\n  request = require('request'),\n  concat = require('concat-stream'),\n  JSONStream = require('JSONStream'),\n  xmldom = require('xmldom');\nmodule.exports = function (query, cb, options) {\n  var contentType;\n  options = options || {};\n  var toGeoJSON = function (data) {\n    var geojson;\n    geojson = osmtogeojson(data, {\n      flatProperties: options.flatProperties || false\n    });\n    cb(undefined, geojson);\n  };\n  var handleXml = function (data) {\n    var parser = new xmldom.DOMParser();\n    var doc = parser.parseFromString(data);\n    toGeoJSON(doc);\n  };\n  var reqOptions = {\n    headers: {\n      'content-type': 'application/x-www-form-urlencoded'\n    },\n    body: querystring.stringify({\n      data: query\n    })\n  };\n  var r;\n  if (!global.window) {\n    r = request.post(options.overpassUrl || 'https://overpass-api.de/api/interpreter', reqOptions);\n    r.on('response', function (response) {\n      if (response.statusCode != 200) {\n        r.abort();\n        return cb({\n          message: 'Request failed: HTTP ' + response.statusCode,\n          statusCode: response.statusCode\n        });\n      }\n      contentType = response.headers['content-type'];\n      if (contentType.indexOf('json') >= 0) {\n        r.pipe(JSONStream.parse()).on('data', toGeoJSON).on('error', cb);\n      } else if (contentType.indexOf('xml') >= 0) {\n        var body = '';\n        r.on('data', function (chunk) {\n          body += chunk;\n        }).on('end', function () {\n          handleXml(body);\n        });\n      } else {\n        cb({\n          message: 'Unknown Content-Type \"' + contentType + '\" in response'\n        });\n      }\n    }).on('error', cb);\n  } else {\n    r = request.post(options.overpassUrl || 'https://overpass-api.de/api/interpreter', reqOptions, function (error, response, body) {\n      if (!error && response.statusCode === 200) {\n        toGeoJSON(JSON.parse(body));\n      } else if (error) {\n        cb(error);\n      } else if (response) {\n        cb({\n          message: 'Request failed: HTTP ' + response.statusCode,\n          statusCode: response.statusCode\n        });\n      } else {\n        cb({\n          message: 'Unknown error.'\n        });\n      }\n    });\n  }\n  return r;\n};","map":{"version":3,"names":["osmtogeojson","require","querystring","request","concat","JSONStream","xmldom","module","exports","query","cb","options","contentType","toGeoJSON","data","geojson","flatProperties","undefined","handleXml","parser","DOMParser","doc","parseFromString","reqOptions","headers","body","stringify","r","global","window","post","overpassUrl","on","response","statusCode","abort","message","indexOf","pipe","parse","chunk","error","JSON"],"sources":["C:/Users/User/Desktop/smieciasmieci-main/node_modules/query-overpass/index.js"],"sourcesContent":["var osmtogeojson = require('osmtogeojson'),\r\n    querystring = require('querystring'),\r\n    request = require('request'),\r\n    concat = require('concat-stream'),\r\n    JSONStream = require('JSONStream'),\r\n    xmldom = require('xmldom')\r\n\r\nmodule.exports = function(query, cb, options) {\r\n    var contentType;\r\n    options = options || {};\r\n\r\n    var toGeoJSON = function(data) {\r\n        var geojson;\r\n\r\n        geojson = osmtogeojson(data, {\r\n            flatProperties: options.flatProperties || false\r\n        });\r\n        cb(undefined, geojson);\r\n    };\r\n\r\n    var handleXml = function (data) {\r\n        var parser = new xmldom.DOMParser();\r\n        var doc = parser.parseFromString(data);\r\n        toGeoJSON(doc);\r\n    }\r\n\r\n    var reqOptions = {\r\n        headers: {\r\n            'content-type': 'application/x-www-form-urlencoded'\r\n        },\r\n        body: querystring.stringify({ data: query })\r\n    };\r\n\r\n    var r;\r\n\r\n    if (!global.window) {\r\n        r = request.post(options.overpassUrl || 'https://overpass-api.de/api/interpreter', reqOptions);\r\n\r\n        r\r\n            .on('response', function(response) {\r\n                if (response.statusCode != 200) {\r\n                    r.abort();\r\n                    return cb({\r\n                        message: 'Request failed: HTTP ' + response.statusCode,\r\n                        statusCode: response.statusCode\r\n                    });\r\n                }\r\n                contentType = response.headers['content-type'];\r\n\r\n                if (contentType.indexOf('json') >= 0) {\r\n                    r.pipe(JSONStream.parse())\r\n                        .on('data', toGeoJSON)\r\n                        .on('error', cb);\r\n                } else if (contentType.indexOf('xml') >= 0) {\r\n                    var body = '';\r\n                    r.on('data', function (chunk) { body += chunk; })\r\n                        .on('end', function() { handleXml(body); });\r\n                } else {\r\n                    cb({\r\n                        message: 'Unknown Content-Type \"' + contentType + '\" in response'\r\n                    });\r\n                }\r\n            })\r\n            .on('error', cb);\r\n    } else {\r\n        r = request.post(options.overpassUrl || 'https://overpass-api.de/api/interpreter', reqOptions, \r\n            function (error, response, body) {\r\n                if (!error && response.statusCode === 200) {\r\n                    toGeoJSON(JSON.parse(body));\r\n                } else if (error) {\r\n                    cb(error);\r\n                } else if (response) {\r\n                    cb({\r\n                        message: 'Request failed: HTTP ' + response.statusCode,\r\n                        statusCode: response.statusCode\r\n                    });\r\n                } else {\r\n                    cb({\r\n                        message: 'Unknown error.',\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    return r;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}