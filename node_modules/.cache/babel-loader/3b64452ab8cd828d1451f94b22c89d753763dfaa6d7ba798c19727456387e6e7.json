{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Komputer 2020\\\\Desktop\\\\bruhjd\\\\src\\\\components\\\\Castles.jsx\";\nimport React from \"react\";\nimport { GeoJSON } from \"react-leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst overpass = require(\"query-overpass\");\nexport default class Castles extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dataHandler = (error, osmData) => {\n      if (!error && osmData.features !== undefined) {\n        this.setState({\n          geojson: osmData\n        });\n      }\n    };\n    this.state = {\n      geojson: undefined\n    };\n  }\n  componentDidMount() {\n    const query = `[out:json];(way[amenity=recycling](around:10000, \t50.049683,\t19.944544);\\\n                              relation[amenity=recycling](around:10000, \t50.049683,\t19.944544););\\\n                              out body;>;out skel qt;`;\n    const options = {\n      flatProperties: true,\n      overpassUrl: 'https://overpass-api.de/api/interpreter'\n    };\n    overpass(query, this.dataHandler, options);\n  }\n  render() {\n    return this.state.geojson ? /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: this.state.geojson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 33\n    }, this) : null;\n  }\n}","map":{"version":3,"names":["React","GeoJSON","jsxDEV","_jsxDEV","overpass","require","Castles","Component","constructor","props","dataHandler","error","osmData","features","undefined","setState","geojson","state","componentDidMount","query","options","flatProperties","overpassUrl","render","data","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Komputer 2020/Desktop/bruhjd/src/components/Castles.jsx"],"sourcesContent":["import React from \"react\";\nimport { GeoJSON } from \"react-leaflet\";\nconst overpass = require(\"query-overpass\");\n\nexport default class Castles extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      geojson: undefined\n    };\n  }\n\n  componentDidMount() {\n    const query = `[out:json];(way[amenity=recycling](around:10000, \t50.049683,\t19.944544);\\\n                              relation[amenity=recycling](around:10000, \t50.049683,\t19.944544););\\\n                              out body;>;out skel qt;`;\n    const options = {\n      flatProperties: true,\n      overpassUrl: 'https://overpass-api.de/api/interpreter'\n    };\n    overpass(query, this.dataHandler, options);\n  }\n\n  dataHandler = (error, osmData) => {\n    if (!error && osmData.features !== undefined) {\n      this.setState({ geojson: osmData });\n    }\n  };\n\n  render() {\n    return this.state.geojson ? <GeoJSON data={this.state.geojson} /> : null;\n  }\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACxC,MAAMC,QAAQ,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAE1C,eAAe,MAAMC,OAAO,SAASN,KAAK,CAACO,SAAS,CAAC;EACnDC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KAiBfC,WAAW,GAAG,CAACC,KAAK,EAAEC,OAAO,KAAK;MAChC,IAAI,CAACD,KAAK,IAAIC,OAAO,CAACC,QAAQ,KAAKC,SAAS,EAAE;QAC5C,IAAI,CAACC,QAAQ,CAAC;UAAEC,OAAO,EAAEJ;QAAQ,CAAC,CAAC;MACrC;IACF,CAAC;IApBC,IAAI,CAACK,KAAK,GAAG;MACXD,OAAO,EAAEF;IACX,CAAC;EACH;EAEAI,iBAAiBA,CAAA,EAAG;IAClB,MAAMC,KAAK,GAAI;AACnB;AACA,sDAAsD;IAClD,MAAMC,OAAO,GAAG;MACdC,cAAc,EAAE,IAAI;MACpBC,WAAW,EAAE;IACf,CAAC;IACDlB,QAAQ,CAACe,KAAK,EAAE,IAAI,CAACT,WAAW,EAAEU,OAAO,CAAC;EAC5C;EAQAG,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAACN,KAAK,CAACD,OAAO,gBAAGb,OAAA,CAACF,OAAO;MAACuB,IAAI,EAAE,IAAI,CAACP,KAAK,CAACD;IAAQ;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,GAAG,IAAI;EAC1E;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}