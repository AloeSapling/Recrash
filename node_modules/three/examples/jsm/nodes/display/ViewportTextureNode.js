import TextureNode from '../accessors/TextureNode.js';
import { NodeUpdateType } from '../core/constants.js';
import { addNodeClass } from '../core/Node.js';
import { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';
import { viewportTopLeft } from './ViewportNode.js';
<<<<<<< HEAD
import { Vector2, FramebufferTexture } from 'three';

const _size = new Vector2();
=======
import { Vector2 } from 'three';

let size = new Vector2();
>>>>>>> 39788b5e01a4817c1ea46a2f2383841e87dacb23

class ViewportTextureNode extends TextureNode {

	constructor( uv = viewportTopLeft, level = null ) {

		super( null, uv, level );

<<<<<<< HEAD
=======
		this.rtt = null;

>>>>>>> 39788b5e01a4817c1ea46a2f2383841e87dacb23
		this.isOutputTextureNode = true;

		this.updateBeforeType = NodeUpdateType.FRAME;

	}

<<<<<<< HEAD
	constructFramebuffer( /*builder*/ ) {

		return new FramebufferTexture();
=======
	constructRTT( builder ) {

		return builder.getRenderTarget();
>>>>>>> 39788b5e01a4817c1ea46a2f2383841e87dacb23

	}

	construct( builder ) {

<<<<<<< HEAD
		if ( this.value === null ) this.value = this.constructFramebuffer( builder );
=======
		if ( this.rtt === null ) this.rtt = this.constructRTT( builder );

		this.value = this.rtt.texture;
>>>>>>> 39788b5e01a4817c1ea46a2f2383841e87dacb23

		return super.construct( builder );

	}

	updateBefore( frame ) {

<<<<<<< HEAD
		const renderer = frame.renderer;
		renderer.getDrawingBufferSize( _size );

		//

		const framebufferTexture = this.value;

		if ( framebufferTexture.image.width !== _size.width || framebufferTexture.image.height !== _size.height ) {

			framebufferTexture.image.width = _size.width;
			framebufferTexture.image.height = _size.height;
			framebufferTexture.needsUpdate = true;

		}

		//

		renderer.copyFramebufferToTexture( framebufferTexture );
=======
		const rtt = this.rtt;

		const renderer = frame.renderer;
		renderer.getDrawingBufferSize( size );

		rtt.setSize( size.width, size.height );

		renderer.copyFramebufferToRenderTarget( rtt );
>>>>>>> 39788b5e01a4817c1ea46a2f2383841e87dacb23

	}

}

export default ViewportTextureNode;

export const viewportTexture = nodeProxy( ViewportTextureNode );

addNodeElement( 'viewportTexture', viewportTexture );

addNodeClass( ViewportTextureNode );
